version: 1.0
tasks:
  # [378, 390]
  create_ad_user:
    action: core.winrm_ps_cmd
    input:
      transport: ntlm
      cmd: "$userInstance= Get-ADUser -Identity \"<% ctx().model_user %>\" \nNew-ADUser -Instance $userInstance -Name \"<% ctx().first_name%> <%ctx().last_name %>\" -GivenName \"<% ctx().first_name %>\" -Surname \"<% ctx().last_name %>\" -DisplayName \"<% ctx().first_name%> <%ctx().last_name %>\" -Department \"<% ctx().department %>\" -Title \"<% ctx().title %>\" -Office \"<% ctx().location %>\" -SamAccountName \"<% ctx().first_name.substring(0,1)%><%ctx().last_name %>\" -UserPrincipalName \"<% ctx().first_name%>.<%ctx().last_name %>@<% ctx().emaildomain %>\" -Path \"<% ctx().target_OU %>\" -AccountPassword $(ConvertTo-SecureString \"<% ctx().random_string %>\" -AsPlainText -Force) -MobilePhone \"<% ctx().mobile %>\" -Company \"<% ctx().company %>\" -ChangePasswordAtLogon $true -Enabled $true"
      host: <% ctx().ad_host[0] %>
      password: <% ctx().password[0] %>
      username: <% ctx().username[0] %>
      verify_ssl_cert: false
      port: 5985
    next:
      - do:
          - expiry_required
        when: <% succeeded() %>
        publish:
          - ad_created: "Yes"
      - do:
          - ticket_update_escalate
        when: <% failed() %>
        publish:
          - ad_created: "NO"
          - membership_copied: "NO"
          - license_added: "NO"
          - mailbox_created: "NO"
          - user_count: " "
  # [375, 637]
  add_description:
    action: core.winrm_ps_cmd
    input:
      transport: ntlm
      cmd: set-aduser -Identity "<% ctx().first_name.substring(0,1)%><%ctx().last_name %>"  -description "MELAIR - <%ctx().title%>"  -Verbose
      host: <% ctx().ad_host[0] %>
      password: <% ctx().password[0] %>
      username: <% ctx().username[0] %>
      verify_ssl_cert: false
      port: 5985
    next:
      - do:
          - copy_membs
  # [375, 732]
  copy_membs:
    action: core.winrm_ps_cmd
    input:
      transport: ntlm
      cmd: "Get-ADUser -Identity <% ctx().model_user %> -Properties memberof | Select-Object -ExpandProperty memberof | Add-ADGroupMember -Members \"<% ctx().first_name.substring(0,1)%><%ctx().last_name %>\""
      password: <% ctx().password[0] %>
      username: <% ctx().username[0] %>
      verify_ssl_cert: false
      host: <% ctx().ad_host[0] %>
      port: 5985
    next:
      - do:
          - fetch_manager_email
        when: <% succeeded() %>
        publish:
          - membership_copied: "Yes"
  # [701, 153]
  add_manager:
    action: core.winrm_ps_cmd
    input:
      transport: ntlm
      cmd: "Get-ADUser -Identity \"<% ctx().first_name.substring(0,1) %><%ctx().last_name %>\" | Set-ADUser -Manager \"<% ctx().objectid %>\""
      host: <% ctx().ad_host[0] %>
      username: <% ctx().username[0] %>
      password: <% ctx().password[0] %>
      verify_ssl_cert: false
      port: 5985
    next:
      - do:
          - add_license_E5
        when: <% ctx().mailbox_required = "Yes" %>
      - do:
          - ticket_update
        when: <% ctx().mailbox_required = "No" %>
  # [1008, 866]
  add_licenes:
    action: core.http
    input:
      url: "https://graph.microsoft.com/v1.0/users/<% ctx().first_name%>.<%ctx().last_name %>@etest.systems/assignLicense"
      body: "{\"addLicenses\":[{\"skuId\":\"f30db892-07e9-47e9-837c-80727f46fd3d\"},{\"skuId\":\"a403ebcc-fae0-4ca2-8c8c-7a907fd6c235\"}],\"removeLicenses\":[]}"
      method: POST
      headers:
        Authorization: Bearer
        Content-Type: application/json
    retry:
      when: <% failed() %>
      count: 2
      delay: 5
    next:
      - do:
          - ticket_update
        publish:
          - state: REMEDIATION
          - info: successfully onboarded
  # [373, 5]
  start:
    action: core.echo
    input:
      message: "\"starting\""
    next:
      - do:
          - random
        publish:
          - ad_host: <% ctx().data.ci_details.where($.ci_id = 'AD01').select(str($.connections.POWERSHELL.ip_address)) %>
          - username: <% ctx().data.ci_details.where($.ci_id = 'AD01').select($.connections.POWERSHELL.username) %>
          - password: <% ctx().data.ci_details.where($.ci_id = 'AD01').select($.connections.POWERSHELL.password) %>
          - model_user: <% ctx().data.data.custom_attributes.modeluser %>
          - mobile: <% ctx().data.data.custom_attributes.phone_number %>
          - location: <% ctx().data.data.custom_attributes.location %>
          - title: <% ctx().data.data.custom_attributes.position %>
          - department: <% ctx().data.data.custom_attributes.business_unit %>
          - first_name: <% ctx().data.data.custom_attributes.firstname %>
          - last_name: <% ctx().data.data.custom_attributes.lastname %>
          - ticketNo: <% ctx().data.itsm.details.ticket_id %>
          - manager: <% ctx().data.data.custom_attributes.managername %>
          - display_user: <% ctx().first_name%> <%ctx().last_name %>
          - MailBoxADGroup: <% ctx().data.data.custom_attributes.MailBoxADGroup %>
          - mailbox_required: <% ctx().data.data.custom_attributes.mailbox_required %>
          - ex_host: <% ctx().data.ci_details.where($.ci_id = 'EX01').select(str($.connections.POWERSHELL.ip_address)) %>
          - target_OU: <% ctx().data.data.custom_attributes.targetoupath %>
          - emaildomain: <% ctx().data.data.custom_attributes.emaildomain %>
          - company: <% ctx().data.data.custom_attributes.company %>
          - expirydate: <% (timespan(days => 365) + now()).format("%d/%m/%Y")  %>
          - stafftype: <% ctx().data.data.custom_attributes.employment_type %>
  # [1068, 366]
  start_delta_sync:
    action: sim_activedirectory.start_delta_ad_sync
    input:
      ad_host: <% ctx().ad_host[0] %>
      username: <% ctx().username[0] %>
      password: <% ctx().password[0] %>
    next:
      - do:
          - sleep_90
  # [1005, 491]
  sleep_90:
    action: core.local
    input:
      cmd: sleep 90
      timeout: 120
    next:
      - do:
          - set_usage_location
        when: <% 2 > 3 %>
      - do:
          - ticket_update
  # [1004, 627]
  set_usage_location:
    action: core.winrm_ps_cmd
    input:
      transport: ntlm
      cmd: "$teamsUsername = 'SiM.Admin@etest.systems'\n	$teamsPassword = 'Monday123!'\n	$secureTeamsPassword = ConvertTo-SecureString -String $teamsPassword -AsPlainText -Force\n	$teamsCreds = New-Object System.Management.Automation.PSCredential ($teamsUsername, $secureTeamsPassword)\nConnect-MsolService -Credential $teamsCreds\nSet-MsolUser -UserPrincipalName \"<% ctx().first_name%>.<%ctx().last_name %>@etest.systems\" -UsageLocation \"AU\""
      host: 10.234.16.10
      username: sim_test
      password: fF2ag96$HS^TXd
      verify_ssl_cert: false
    next:
      - do:
          - sleep_20
  # [705, 1023]
  end:
    action: core.noop
  # [704, 902]
  ticket_update:
    action: core.echo
    input:
      message: "Automation update for user onboarding is as follows:\n\nUser Created: <% ctx().first_name %> <% ctx().last_name %>\nDescription added: User Onboarded as part of <% ctx().ticketNo %>\nMembership groups added from: <%ctx().model_user %>\nMembership groups copied: <% ctx().membership_copied %>\nAD sync: True\nLicense Added: <% ctx().license_added %>\nMailbox Created: <% ctx().mailbox_created %>"
    next:
      - do:
          - end
        publish:
          - state: REMEDIATION
          - info:
              ticketNo: <% ctx().data.itsm.details.ticket_id %>
              summary: AD and EX tasks attempted
              next_action: escalate
              root_cause: actions_failed
              first_notified: <% task().end_timestamp %>
              last_worked_upon: <% task().end_timestamp %>
              ad_created: <% ctx().ad_created %>
              membership_copied: <% ctx().ad_created %>
              license_added: <% ctx().license_added %>
              mailbox_created: <% ctx().mailbox_created %>
              next_action_attributes:
                escalate:
                  resolution_flag: false
                  team_name: SD
                  owner: None
                  status: In Progress
                  ticket_update: Sim Automation is escalating the service request after completing AD and Exchange tasks
          - execution_log: "[{\"task_name\":\"ad_created\",\"expected_returncode\":\"Yes\", \"actual_returncode\":<% ctx().ad_created  %>},{\"task_name\":\"membership_copied\",\"expected_returncode\":\"Yes\", \"actual_returncode\":<% ctx().membership_copied  %>},{\"task_name\":\"license_added\",\"expected_returncode\":\"Yes\", \"actual_returncode\":<% ctx().license_added  %>},{\"task_name\":\"mailbox_created\",\"expected_returncode\":\"Yes\", \"actual_returncode\":<% ctx().mailbox_created  %>}]"
  # [1008, 743]
  sleep_20:
    action: core.local
    input:
      cmd: sleep 20
    next:
      - do:
          - add_licenes
  # [994, 92]
  add_license_E5:
    action: core.winrm_ps_cmd
    input:
      transport: ntlm
      cmd: "Add-ADGroupMember -Identity \"<% ctx().MailBoxADGroup %>\" -Members \"<% ctx().first_name.substring(0,1)%><%ctx().last_name %>\" "
      host: <% ctx().ad_host[0] %>
      password: <% ctx().password[0] %>
      username: <% ctx().username[0] %>
      verify_ssl_cert: false
      port: 5985
    next:
      - do:
          - create_mailbox
        when: <% succeeded() %>
        publish:
          - license_added: "Yes"
  # [378, 232]
  check_ad_user:
    action: sim_activedirectory.check_ad_user
    input:
      ad_host: <% ctx().ad_host[0] %>
      display_name: <% ctx().display_user %>
      username: <% ctx().username[0] %>
      password: <% ctx().password[0] %>
    next:
      - do:
          - create_ad_user
        when: <% str(result().output.task_output.stdout) != "1" and  result().output.task_output.succeeded = true %>
        publish:
          - user_count: <% result().output.task_output.stdout %
      - do:
          - ticket_update_escalate
        when: <% str(result().output.task_output.stdout) = "1"  or result().output.task_output.succeeded = false %>
        publish:
          - user_count: <% result().output.task_output.stdout %>
  # [1, 237]
  ticket_update_escalate:
    action: core.echo
    input:
      message: Input User Issue. Escalating ticket.Reason <% ctx().user_count %> user already present on active directory or error creating new user.
    next:
      - do:
          - end_1_user_exists
        publish:
          - state: DIAGNOSIS
          - info:
              ticketNo: <% ctx().data.itsm.details.ticket_id %>
              summary: User NOT on-boarded
              next_action: escalate
              root_cause: actions_failed
              first_notified: <% task().end_timestamp %>
              last_worked_upon: <% task().end_timestamp %>
              ad_created: <% ctx().ad_created %>
              membership_copied: <% ctx().ad_created %>
              license_added: <% ctx().license_added %>
              mailbox_created: <% ctx().mailbox_created %>
              next_action_attributes:
                escalate:
                  resolution_flag: false
                  team_name: SD
                  owner: None
                  status: In Progress
                  ticket_update: Sim Automation is escalating the service request after finding the user to be onboarded already exists
          - execution_log: "[{\"task_name\":\"check_ad_user\",\"expected_returncode\":\"1\", \"actual_returncode\":<% ctx().user_count  %>}]"
  # [996, 226]
  create_mailbox:
    action: sim_exchange.create_mailboxscript
    input:
      ad_host: <% ctx().ad_host[0] %>
      exchange_username: <% ctx().username[0] %>
      mailbox_type: User
      exchange_password: <% ctx().password[0] %>
      SamAccountName: <% ctx().first_name.substring(0,1)%><%ctx().last_name %>
      exchange_host: <% ctx().ex_host[0] %>
      email_address: <% ctx().first_name%>.<%ctx().last_name %>@<% ctx().emaildomain %>
      use_commands_instead: "\"YES\""
    next:
      - do:
          - start_delta_sync
        when: <% result().output.is_mailbox_created.indexOf('mailbox not created') != -1 %>
        publish:
          - mailbox_created: "NO"
      - do:
          - check
        when: <% result().output.is_mailbox_created.indexOf('mailbox not created') = -1 %>
        publish:
          - mailbox_created: "Yes"
  # [0, 391]
  end_1_user_exists:
    action: core.noop
  # [376, 843]
  fetch_manager_email:
    action: sim_activedirectory.fetch_email_object_ad_user
    input:
      ad_host: <% ctx().ad_host[0] %>
      display_name: <% ctx().manager %>
      username: <% ctx().username[0] %>
      password: <% ctx().password[0] %>
    next:
      - do:
          - add_manager
        publish:
          - email: <% regex_substring(result().output.task_output.stdout, "(\S+@\S+)") %>
          - objectid: <% regex_substring(result().output.task_output.stdout, "(\S+-\S+-\S+-\S+)") %>
  # [375, 109]
  random:
    action: core.local
    input:
      cmd: "curl -x http://210.48.210.35:3128/ -X GET 'https://pwd.ecorp.systems/api/generatepassword/' -H 'APIKey: e75c3a324b869fd46d98ec23f75ba3c3' -v -L"
    next:
      - do:
          - check_ad_user
        publish:
          - random_string: <% result().stdout[0].Password %>
  # [774, 330]
  check:
    action: core.noop
    next:
      - do:
          - start_delta_sync
  # [91, 562]
  set_account_expiry:
    action: core.winrm_ps_cmd
    input:
      transport: ntlm
      cmd: "Set-ADAccountExpiration  -Identity \"<% ctx().first_name.substring(0,1)%><%ctx().last_name %>\" -DateTime \"<% ctx().expirydate %>\""
      host: <% ctx().ad_host[0] %>
      username: <% ctx().username[0] %>
      port: 5985
      verify_ssl_cert: false
      password: <% ctx().password[0] %>
    next:
      - do:
          - add_description
  # [376, 508]
  expiry_required:
    action: core.noop
    next:
      - do:
          - set_account_expiry
        when: <% ctx().stafftype != "APAC Staff" %>
      - do:
          - add_description
        when: <% ctx().stafftype = "APAC Staff" %>
input:
  - data
output:
  - state: <% ctx().state %>
  - info:  <% ctx().info %>
vars:
  - ad_created: NO
  - membership_copied: NO
  - license_added: NO
  - mailbox_created: NO
