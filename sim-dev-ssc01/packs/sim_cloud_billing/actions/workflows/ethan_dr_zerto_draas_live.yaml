version: 1.0

input:
  - site_name
  - site_address
  - cloud_db_connection
  - billing_db_connection

vars:
  - result: []

output:
  - draas: "<% str(len(ctx().result)) %> inserted"

tasks:
  Start:
    action: core.noop
    next:
      - when: <% succeeded() %>
        do:
          - Get_ZVM_VPGs

  Get_ZVM_VPGs:
    action: sim_zerto_core.zvm_get_vpgs
    input:
      zvm_host: <% ctx().site_address %>
    next:
      - when: <% succeeded() %>
        publish:
          - zvm_vpgs: <% switch(isList(result().result) => result().result, true => []) %>
        do:
          - Get_ZVM_VMs
      - when: <% failed() %>
        do: fail

  Get_ZVM_VMs:
    action: sim_zerto_core.zvm_get_vms
    input:
      zvm_host: <% ctx().site_address %>
    next:
      - when: <% succeeded() %>
        publish:
          - zvm_vms: <% switch(isList(result().result) => result().result, true => []) %>
          - pvms: "{%- set accumulator = namespace(found='no') -%}{%- set resourceArr = [] -%}{%- for vm in ctx().zvm_vms -%}{%- set accumulator.found = 'no' -%}{%- for vpg in ctx().zvm_vpgs if vpg['VpgIdentifier'] == vm['VpgIdentifier']  -%}{{ vm.update({'ServiceProfileName': vpg['ServiceProfileName']}) or '' }}{{ vm.update({'ServiceProfileIdentifier': vpg['ServiceProfileIdentifier']}) or '' }}{{ vm.update({'ConfiguredRpoSeconds': vpg['ConfiguredRpoSeconds']}) or '' }}{{ vm.update({'ConfiguredHistoryInMinutes': vpg['ConfiguredHistoryInMinutes']}) or '' }}{{ vm.update({'ActualHistoryInMinutes': vpg['ActualHistoryInMinutes']}) or '' }}{%- set accumulator.found = 'yes' -%}{%- endfor -%}{% if accumulator.found == 'no' -%}{{ vm.update({'ServiceProfileName': ''}) or '' }}{{ vm.update({'ServiceProfileIdentifier': ''}) or '' }}{{ vm.update({'ConfiguredRpoSeconds': ''}) or '' }}{{ vm.update({'ConfiguredHistoryInMinutes': ''}) or '' }}{{ vm.update({'ActualHistoryInMinutes': ''}) or '' }}{%- endif %}{{ resourceArr.append(vm) or '' }}{%- endfor -%}{{resourceArr | tojson}}"
          - pvms: "{{ ctx().pvms | from_json_string  }}"
        do:
          - Check_For_Live_Records
      - when: <% failed() %>
        do: fail

  Check_For_Live_Records:
    action: core.noop
    next:
      - when: <% len(ctx().pvms) > 0 %>
        do:
          - SQL_Select_Cloud_IaaS_Live
      - when: <% len(ctx().pvms) = 0 %>
        publish:
          - scan_log: <% dict(system_id=>ctx().site_address, system_type=>'Zerto', system_name=>ctx().site_name, num_of_records=>len(ctx().pvms), additional_info=>'DRAAS') %>
        do:
          - Insert_Scanned_Data
          - End

  SQL_Select_Cloud_IaaS_Live:
    action: sql.query
    input:
      connection: <% ctx().cloud_db_connection %>
      query: "SELECT vmID,managedID,vmName FROM Iaas_Live WHERE vmActive = '1'"
    next:
      - when: <% succeeded() %>
        publish:
          - sql_iaas_vm_data: <% switch(isList(result().result) => result().result, true => []) %>
          - result: "{%- set accumulator = namespace(found='no') -%}{%- set resourceArr = [] -%}{%- for vm in ctx().pvms -%}{%- set accumulator.found = 'no' -%}{%- for sql_vm in ctx().sql_iaas_vm_data if vm['VmID'] !='0' and sql_vm['vmID']|int == vm['VmID']|int and sql_vm['vmName']|lower in vm['VmName']|lower -%}{{ vm.update({'managedID': sql_vm['managedID']}) or '' }}{%- set accumulator.found = 'yes' -%}{%- endfor -%}{%- if accumulator.found == 'no' -%}{{ vm.update({'managedID': ''}) or '' }}{%- endif -%}{{ resourceArr.append(vm) or '' }}{%- endfor -%}{{resourceArr | tojson}}"
          - result: "{{ ctx().result | from_json_string  }}"
        do:
          - Check_For_Records
      - when: <% failed() %>
        do: fail

  Check_For_Records:
    action: core.noop
    next:
      - when: <% len(ctx().result) > 0 %>
        publish:
          - last_event_date: <% (now(offset=>localtz())).format("%Y-%m-%d %H:%M:%S") %>
          - scan_log: <% dict(system_id=>ctx().site_address, system_type=>'Zerto', system_name=>ctx().site_name, num_of_records=>len(ctx().result), last_event_at=>ctx().last_event_date, additional_info=>'DRAAS') %>
        do:
          - Insert_Into_DRaaS_Live
          - Insert_Scanned_Data
      - when: <% len(ctx().result) = 0 %>
        publish:
          - scan_log: <% dict(system_id=>ctx().site_address, system_type=>'Zerto', system_name=>ctx().site_name, num_of_records=>len(ctx().result), additional_info=>'DRAAS') %>
        do:
          - Insert_Scanned_Data
          - End

  Insert_Into_DRaaS_Live:
    action: sql.insert_bulk
    input:
      table: "DRaaS_Live"
      data: <% ctx().result %>
      connection: <% ctx().cloud_db_connection %>
    next:
      - when: <% succeeded() %>
        do:
          - End
      - when: <% failed() %>
        do: fail

  Insert_Scanned_Data:
    action: sql.insert_bulk
    input:
      table: "IaaSScanLog"
      data: <% list(ctx().scan_log) %>
      connection: <% ctx().billing_db_connection %>
    next:
      - when: <% failed() %>
        do: noop

  End: 
    action: core.noop
