version: 1.0

input:
  - billing_db_connection
  - vcenter_id
  - vcenter
  - proxy_vcenters

vars:
  - datastores: []
  - result: {"insert": [], "update": []}

output:
  - result: <% ctx().result.insert %>


tasks:
  Start:
    action: core.noop
    next:
      - when: <% succeeded() %>
        publish:
          - client_vcenters: <% ctx(proxy_vcenters).select($.name) %>
        do:
          - SQL_Select_Billing_Datstores

  SQL_Select_Billing_Datstores:
    action: sql.query
    input:
      connection: <% ctx().billing_db_connection %>
      query: "SELECT dsidx FROM iaasDatastores WHERE dsVCid='<% ctx().vcenter_id %>'"
    next:
      - when: <% succeeded() %>
        publish:
          - billing_datastore_db_data: <% switch(isList(result().result) => result().result, true => []) %>
        do:
          - Get_Datastores
      - when: <% failed() %>
        do: fail

  Get_Datastores:
    action: sim_vmware2.vcenter_datastores
    input:
      vcenter_id: <% ctx().vcenter_id %>
      vsphere: <% ctx().vcenter %>
    next:
      - when: <% succeeded() %>
        publish:
          - ds_output: <% switch(isList(result().result) => result().result, true => []) %>
        do:
          - Tags_Needed
      - when: <% failed() %>
        do: fail

  Tags_Needed:
    action: core.noop
    next:
      - when: <% ctx().vcenter in ctx().client_vcenters %> 
        publish:
          - get_tags: false
        do:
          - Get_Vcenter_Datastore_Tags
      - when: <% not ctx().vcenter in ctx().client_vcenters %>
        publish:
          - get_tags: true
        do:
          - Get_Vcenter_Datastore_Tags

  Get_Vcenter_Datastore_Tags:
    action: sim_vmware2.vcenter_raw_data
    input:
      vcenter_id: <% ctx().vcenter_id %>
      vsphere: <% ctx().vcenter %>
      get_tags: <% ctx().get_tags %>
      tag_filter: ['SROLE', 'STIER', 'CUSTID']
    next:
      - when: <% succeeded() %>
        publish:
          - ds_tag_output: <% switch(isDict(result().result) => result().result, true => {}) %>
        do:
          - Transform_DS_Data
      - when: <% failed() %>
        do: fail

  Transform_DS_Data:
    action: sim_cloud_rating.ethan_vcenter_datastore_transform
    input:
      tag_data: <% ctx().ds_tag_output.Categories %>
      ds_data: <% ctx().ds_output %>
      vcenter: <% ctx().vcenter %>
      proxy_vcenters: <% ctx().proxy_vcenters %>
    next:
      - when: <% succeeded() %>
        publish:
          - datastores: <% switch(isList(result().result) => result().result, true => []) %>
        do:
          - Insert_or_Update_List_Generator
      - when: <% failed() %>
        do: fail

  Insert_or_Update_List_Generator:
    action: sim_cloud_rating.ethan_vcenter_datastore_generator
    input:
      vcenter_data: <% ctx().datastores %>
      db_data: <% ctx().billing_datastore_db_data %>
    next:
      - when: <% succeeded() %>
        publish:
          - result: <% switch(isDict(result().result) => result().result, true => {}) %>
          - last_event_date: <% (now(offset=>localtz())).format("%Y-%m-%d %H:%M:%S") %>
          - scan_log: <% dict(system_id=>ctx().vcenter_id, system_type=>'vcenter_datastores', system_name=>ctx().vcenter, num_of_records=>len(ctx().result.update) + len(ctx().result.insert), additional_info=>'DS', last_event_at=>ctx().last_event_date) %>
        do:
          - Check_For_Records
          - Insert_Scanned_Data
      - when: <% failed() %>
        do: fail

  Insert_Scanned_Data:
    action: sql.insert_bulk
    input:
      table: "IaaSScanLog"
      data: <% list(ctx().scan_log) %>
      connection: <% ctx().billing_db_connection %>
    next:
      - when: <% failed() %>
        do: noop

  Check_For_Records:
    action: core.noop
    next:
      - when: <% len(ctx().result.update) > 0 %>
        do:
          - Update_DS_Records
      - when: <% len(ctx().result.insert) > 0 %>
        do:
          - Insert_DS_Records
      - when: <% len(ctx().result.update) = 0 and len(ctx().result.insert) = 0 %>
        do: End

  Insert_DS_Records:
    action: sql.insert_bulk
    input:
      connection: <% ctx().billing_db_connection %>
      table: "iaasDatastores"
      data: <% ctx().result.insert %>
    next:
      - when: <% succeeded() %>
        do: DS_Insert_End
      - when: <% failed() %>
        do: fail

  Update_DS_Records:
    action: sql.update_bulk
    input:
      connection: <% ctx().billing_db_connection %>
      table: "iaasDatastores"
      data: <% ctx().result.update %>
      update_values: ['dsName', 'custid', 'storageRole', 'storageTier', 'dsTotalSize', 'dsUsed', 'lastUpdated']
      column_filter1: "dsidx"
    next:
      - when: <% succeeded() %>
        do: DS_Update_End
      - when: <% failed() %>
        do: fail

  DS_Insert_End:
    action: core.noop

  DS_Update_End:
    action: core.noop

  End: 
    action: core.noop
