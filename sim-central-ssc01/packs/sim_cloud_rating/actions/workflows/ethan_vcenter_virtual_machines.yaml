version: 1.0

input:
  - billing_db_connection
  - cloud_db_connection
  - vcenter_id
  - vcenter
  - pull_period
  - proxy_vcenters

vars:
  - create_events: ['VmClonedEvent', 'VmConnectedEvent', 'VmCreatedEvent', 'VmDeployedEvent', 'VmMigratedEvent', 'VmRegisteredEvent', 'VmDiscoveredEvent']
  - remove_event: ['VmRemovedEvent', 'VmDecommisionedEvent']
  - reconfigure_event: 'VmReconfiguredEvent'
  - host_migrated_events: ['VmHostMigratedEvent'] 
  - events: []

output:
  - result: <% ctx().events %>


tasks:
  # [192, 51]
  Start:
    action: core.noop
    next:
      - when: <% succeeded() %>
        do:
          - Get_Vcenter_Events

  # [142, 851]
  SQL_Select_Billing_CustIDs:
    action: sql.query
    input:
      connection: <% ctx().billing_db_connection %>
      query: "SELECT ethvmid,custidx FROM IaasVMCustInfo WHERE ethvmid like '<% ctx().vcenter_id%>%'"
    next:
      - when: <% succeeded() %>
        publish:
          - billing_custid_db_data: <% switch(isList(result().result) => result().result, true => []) %>
        do:
          - SQL_Select_Billing_Datstores
      - when: <% failed() %>
        do: fail

  # [292, 1051]
  SQL_Select_Billing_Datstores:
    action: sql.query
    input:
      connection: <% ctx().billing_db_connection %>
      query: "SELECT dsidx, storageTier FROM iaasDatastores WHERE dsidx LIKE '<% ctx().vcenter_id %>-%'"
    next:
      - when: <% succeeded() %>
        publish:
          - billing_datastore_db_data: <% switch(isList(result().result) => result().result, true => []) %>
        do:
          - Check_For_Actions
      - when: <% failed() %>
        do: fail

  # [143, 200]
  Get_Vcenter_Events:
    action: sim_vsphere.vcenter_events
    input:
      vsphere: <% ctx().vcenter %>
      vcenter_id: <% ctx().vcenter_id %>
      event_period: <% ctx().pull_period %>
      #event_period: 24
    next:
      - when: <% succeeded() %>
        publish:
          - orig_events: <% switch(isList(result().result) => result().result, true => []) %>
        do:
          - Action_Needed_0
      - when: <% failed() %>
        do: fail

  # [42, 351]
  Action_Needed_0:
    action: core.noop
    next:
      - when: <% len(ctx().orig_events) > 0 %>
        do:
          - Billing_VcEvents_Operations
      - when: <% len(ctx().orig_events) = 0 %>
        do:
          - End

  # [342, 701]
  Action_Needed_1:
    action: core.noop
    next:
      - when: <% len(ctx().events) > 0 %>
        publish:
          - last_event_date: <% (now(offset=>localtz())).format("%Y-%m-%d %H:%M:%S") %>
        do:
          - SQL_Select_Billing_Datstores
      - when: <% 1 != 1 %>
        do:
          - SQL_Select_Billing_CustIDs
      - when: <% len(ctx().events) = 0 %>
        do:
          - End

  # [442, 551]
  Billing_VcEvents_Operations:
    action: sim_cloud_rating.ethan_vcenter_events
    input:
      billing_db_connection: <% ctx().billing_db_connection %>
      vmevents: <% ctx().orig_events %>
      vcenter_id: <% ctx().vcenter_id %>
    next:
      - when: <% succeeded() %>
        publish:
          - events: <% switch(isList(result().output.events) => result().output.events, true => []) %>
          - uniq_host_migration_events: <% ctx(events).where($.Event_Type in ctx().host_migrated_events).select($.VmId).distinct() %>
          - vm_uniq_remove_events: <% ctx(events).where($.Event_Type in ctx().remove_event and $.containsKey('EthVmId') and not $.VmId in ctx().uniq_host_migration_events).select($.VmId).distinct() %>
          - vm_uniq_create_events: <% ctx(events).where($.Event_Type in ctx().create_events and not $.VmId in ctx().vm_uniq_remove_events and not $.containsKey('EthVmId')).select($.VmId).distinct() %>
          - vm_uniq_reconfigure_events: <% ctx(events).where($.Event_Type = ctx().reconfigure_event and not $.VmId in ctx().vm_uniq_remove_events and not $.VmId in ctx().vm_uniq_create_events).select($.VmId).distinct() %>
          - vm_uniq_configure_event_id: "{{ ctx().vm_uniq_reconfigure_events | join(',') }}"
          - vm_uniq_update_events: <% ctx(events).where(not $.Event_Type in ctx().host_migrated_events and not $.Event_Type in ctx().create_events and not $.Event_Type in ctx().remove_event and $.Event_Type != ctx().reconfigure_event and not $.VmId in ctx().vm_uniq_remove_events and not $.VmId in ctx().vm_uniq_reconfigure_events and not $.VmId in ctx().vm_uniq_create_events).select($.VmId).distinct() %>
          - vm_uniq_update_id: "{{ ctx().vm_uniq_update_events | join(',') }}"
        do:
          - Action_Needed_1
      - when: <% failed() %>
        do: fail

  # [2592, 1101]
  Billing_VcEvents_Insert:
    action: sim_cloud_rating.ethan_vcenter_events
    input:
      billing_db_connection: <% ctx().billing_db_connection %>
      vmevents: <% ctx().events %>
      vcenter_id: <% ctx().vcenter_id %>
      final_action: true
    next:
      - when: <% succeeded() %>
        do:
          - Event_End
      - when: <% failed() %>
        do: fail

  # [542, 301]
  Check_For_Actions:
    action: core.noop
    next:
      - when: <% len(ctx().vm_uniq_create_events) > 0 %>
        do:
          - Get_Vcenter_Raw_Create_Data
      - when: <% len(ctx().vm_uniq_update_events) > 0 %>
        do:
          - Prepare_Vcenter_Update_Data
      - when: <% len(ctx().vm_uniq_remove_events) > 0 %>
        do:
          - Remove_List_Generator
      - when: <% len(ctx().vm_uniq_reconfigure_events) > 0  %>
        do:
          - SQL_Select_Billing_VM
      - when: <% len(ctx().vm_uniq_create_events) = 0 and len(ctx().vm_uniq_update_events) = 0 and len(ctx().vm_uniq_remove_events) = 0 and len(ctx().vm_uniq_reconfigure_events) = 0 %>
        do: 
          - End
      - when: <% failed() %>
        do: 
          - fail

  # [742, 501]
  Prepare_Vcenter_Update_Data:
    action: core.noop
    next:
      - when: <% succeeded() or failed() %>
        publish:
          - vm_uniq_reconfigure_events: <% ctx().vm_uniq_update_events %>
          - vm_uniq_configure_event_id: <% ctx().vm_uniq_update_id %>
        do:
          - SQL_Select_Billing_VM

  # [1542, 1051]
  Get_Vcenter_Raw_Reconfigure_Data:
    action: sim_vsphere.vcenter_raw_data
    input:
      vcenter_id: <% ctx().vcenter_id %>
      vsphere: <% ctx().vcenter %>
      get_vms: true
      get_vm_disks: true
      datastores: <% ctx().billing_datastore_db_data %>
      #custids: <% ctx().billing_custid_db_data %>
      ids: <% ctx().vm_uniq_reconfigure_events %>
      proxy_vcenters: <% ctx().proxy_vcenters %>
    next:
      - when: <% succeeded() %>
        publish:
          - reconfigure_vm_output: <% switch(isDict(result().result) => result().result, true => {}) %>
        do:
          - VM_Action_Generator
          - VM_Disk_Action_Generator
      - when: <% failed() %>
        do: fail

  # [1792, 901]
  VM_Action_Generator:
    action: sim_cloud_rating.ethan_vcenter_vm_generator_v1
    input:
      db_data: <% ctx().billing_vm_db_data %>
      vc_data: <% ctx().reconfigure_vm_output.VirtualMachines %>
      data_type: "vm"
      events: <% ctx().events %>
      create_events: <% ctx().create_events %>
    next:
      - when: <% succeeded() %>
        publish:
          - vm_action: <% switch(isDict(result().result) => result().result, true => {}) %>
        do:
          - VM_Database_Operations
      - when: <% failed() %>
        do: fail

  # [1992, 1101]
  VM_Database_Operations:
    action: sim_cloud_rating.vcenter_vm_database_update
    input:
      insert_data: <% ctx().vm_action.insert %>
      update_data: <% ctx().vm_action.update %>
      remove_data: <% ctx().vm_action.remove %>
      db_connection: <% ctx().billing_db_connection %>
      target_table: "EthVms"
    next:
      - when: <% succeeded() %>
        do: Reconfigure_VM_End
      - when: <% failed() %>
        do: fail

  # [42, 651]
  VM_Disk_Action_Generator:
    action: sim_cloud_rating.ethan_vcenter_vm_generator_v1
    input:
      db_data: <% ctx().billing_vmdisk_db_data %>
      vc_data: <% ctx().reconfigure_vm_output.VMDisks %>
      data_type: "vm_disk"
    next:
      - when: <% succeeded() %>
        publish:
          - vm_disk_action: <% switch(isDict(result().result) => result().result, true => {}) %>
        do:
          - VM_Disk_Database_Operations
      - when: <% failed() %>
        do: fail

  # [2292, 1101]
  VM_Disk_Database_Operations:
    action: sim_cloud_rating.vcenter_vm_disk_database_update
    input:
      insert_data: <% ctx().vm_disk_action.insert %>
      update_data: <% ctx().vm_disk_action.update %>
      remove_data: <% ctx().vm_disk_action.remove %>
      db_connection: <% ctx().billing_db_connection %>
      target_table: "EthVmDisk"
    next:
      - when: <% succeeded() %>
        do: Reconfigure_VM_Disk_End
      - when: <% failed() %>
        do: fail

  # [1042, 501]
  SQL_Select_Billing_VM:
    action: sql.query
    input:
      connection: <% ctx().billing_db_connection %>
      query: "SELECT EthVmId,VmId FROM EthVms WHERE VmId in (<% ctx().vm_uniq_configure_event_id %>)"
    next:
      - when: <% succeeded() %>
        publish:
          - billing_vm_db_data: <% switch(isList(result().result) => result().result, true => []) %>
        do:
          - SQL_Select_Billing_VMDisk
      - when: <% failed() %>
        do: fail

  # [892, 651]
  SQL_Select_Billing_VMDisk:
    action: sql.query
    input:
      connection: <% ctx().billing_db_connection %>
      query: "SELECT EthVmId,DeviceKey,LastScanTime FROM EthVmDisk WHERE VmId in (<% ctx().vm_uniq_configure_event_id %>)"
    next:
      - when: <% succeeded() %>
        publish:
          - billing_vmdisk_db_data: <% switch(isList(result().result) => result().result, true => []) %>
        do:
          - Get_Vcenter_Raw_Reconfigure_Data
      - when: <% failed() %>
        do: fail
          
  # [1392, 401]
  Get_Vcenter_Raw_Create_Data:
    action: sim_vsphere.vcenter_raw_data
    input:
      vcenter_id: <% ctx().vcenter_id %>
      vsphere: <% ctx().vcenter %>
      get_vms: true
      get_vm_disks: true
      get_vm_networks: false
      datastores: <% ctx().billing_datastore_db_data %>
      #custids: <% ctx().billing_custid_db_data %>
      ids: <% ctx().vm_uniq_create_events %>
      proxy_vcenters: <% ctx().proxy_vcenters %>
    next:
      - when: <% succeeded() %>
        publish:
          - create_vm_output: <% switch(isDict(result().result) => result().result, true => {}) %>
        do:
          - Insert_List_Generator
      - when: <% failed() %>
        do: fail

  # [1542, 601]
  Insert_List_Generator:
    action: sim_cloud_rating.ethan_vcenter_vm_generator_v2
    input:
      data: <% ctx().create_vm_output %>
      action: "insert"
      events: <% ctx().events %>
      create_events: <% ctx().create_events %>
    next:
      - when: <% succeeded() %>
        publish:
          - insert_action: <% switch(isDict(result().result) => result().result, true => {}) %>
        do:
          - Create_Database_Operations
      - when: <% failed() %>
        do: fail

  # [1292, 201]
  Remove_List_Generator:
    action: sim_cloud_rating.ethan_vcenter_vm_generator_v2
    input:
      data: {}
      action: "remove"
      events: <% ctx().events %>
    next:
      - when: <% succeeded() %>
        publish:
          - remove_action: <% switch(isDict(result().result) => result().result, true => {}) %>
        do:
          - Remove_Database_Operations
      - when: <% failed() %>
        do: fail


  # [1942, 751]
  Create_Database_Operations:
    action: sim_cloud_rating.vcenter_create_database_ops
    input:
      vms: <% ctx().insert_action.vm %>
      vmdisks: <% ctx().insert_action.vmdisk %>
      billing_db_connection: <% ctx().billing_db_connection %>
    next:
      - when: <% succeeded() %>
        do: Create_End
      - when: <% failed() %>
        do: fail

  # [1042, 351]
  Remove_Database_Operations:
    action: sim_cloud_rating.vcenter_remove_database_ops
    input:
      vms: <% ctx().remove_action.vm %>
      vmdisks: <% ctx().remove_action.vmdisk %>
      billing_db_connection: <% ctx().billing_db_connection %>
    next:
      - when: <% succeeded() %>
        do: Remove_End
      - when: <% failed() %>
        do: fail

  # [2392, 951]
  Create_End:
    delay: 180
    action: core.noop
    next:
      - when: <% len(ctx().vm_uniq_create_events) > 0 and not len(ctx().vm_uniq_reconfigure_events) > 0 %>
        do: 
          - Billing_VcEvents_Insert

  # [2092, 901]
  Remove_End:
    action: core.noop

  # [1742, 401]
  Reconfigure_VM_End:
    action: core.noop
    next:
      - when: <% succeeded() %>
        do: Reconfigure_End
    
  # [1892, 601]
  Reconfigure_VM_Disk_End:
    action: core.noop
    next:
      - when: <% succeeded() %>
        do: Reconfigure_End

  # [2192, 551]
  Reconfigure_End:
    join: all
    action: core.noop
    next:
      - when: <% succeeded() %>
        do: 
          - Billing_VcEvents_Insert

  # [2392, 751]
  Event_End:
    action: core.noop

  # [642, 901]
  End: 
    action: core.noop
