---
version: 1.0

description: Automated collection of Asset vulnerability data from NIST

vars:
  - notifications: []
  - process_name: "Security Vulnerability Assets scan"

output:
  - assets: <% ctx().assets_clean %>
  - cves: <% ctx().cves %>

tasks:
  # [1357, 212]
  Start:
    action: core.noop
    next:
      - when: <% succeeded() %>
        publish:
          - notification: (<% ctx().process_name%>) process started
        do:
          - notify
          - select_nw_assets
  # [1767, 473]
  notify:
    action: core.echo
    input:
      message: <% ctx().notification %>
  # [970, 319]
  select_nw_assets:
    action: sql.query
    input:
      log_level: DEBUG
      query: "select net_a.AssetID\n,sec_l.cpeID\n,left(replace(sec_l.cpeID, 'cpe:2.3:h:',''), charindex(':',replace(sec_l.cpeID, 'cpe:2.3:h:',''))-1) MatchingVendor\n,left(replace(sec_l.cpeID, 'cpe:2.3:h:cisco:',''), charindex(':',replace(sec_l.cpeID, 'cpe:2.3:h:cisco:',''))-1) MatchingModel\n,\ncase when\nCHARINDEX(' ',replace(net_o.IOSVersion,',',' ')) > 0\nthen\nreplace(replace(left(net_o.IOSVersion, CHARINDEX(' ',replace(net_o.IOSVersion,',',' '))-1), '(','\\('), ')','\\)')\nelse\nreplace(replace(net_o.IOSVersion, '(','\\('), ')','\\)')\nend MatchingOSVersion\n,case\nwhen net_o.OSType = 'NXOS' then 'nx_os'\nwhen net_o.OSType = 'IOSXE' then 'ios_xe'\nwhen net_o.OSType = 'IOS' then 'ios'\nelse net_o.OSType\nend MatchingOSType\n,net_o.IOSVersion\n,net_o.OSType\n,net_d.DeviceName\n,net_d.Manufacturer\n,net_a.Model\nfrom NetworkCustomerDeviceOS net_o\n,NetworkCustomerSiteDevices net_d\n,NetworkCustomerDeviceAssets net_a\n,sec_device_linkage sec_l\nwhere net_d.Monitor_SW_NodeID = net_o.SWNodeID\nand net_a.DeviceID = net_d.DeviceID\nand sec_l.deviceName = net_a.Model"
      connection: cloudmanagement
    next:
      - do:
          - remove_empty_cpe
          - notify
        publish:
          - records: <% result().result %>
          - assets_clean: "{%- set assets = [] %}\n{%- for asset in ctx().records if asset.cpeID is not none -%}\n{{ assets.append(asset) or \"\" }}\n{%- endfor -%}\n{%- set result = assets\n-%}\n{{result|tojson}}"
          - notification: <% len(ctx().records) %>  assets retrieved. <% len(ctx().assets_clean) %>
  # [1039, 481]
  remove_empty_cpe:
    action: core.noop
    next:
      - do:
          - call_NIST_2
        publish:
          - output_json: '{{ ctx().assets_clean | from_json_string  }}'
  # [1261, 886]
  insert_records_sec_vul:
    action: sql.insert_bulk
    input:
      log_level: DEBUG
      data: "{{ctx().cves}}"
      table: sec_vulnerability_assets
      connection: cloudmanagement
    next:
      - do:
          - get_cves_insert_db
        when: <% succeeded() %>
  # [1263, 781]
  Delete_current_data:
    action: sql.delete
    next:
      - do:
          - insert_records_sec_vul
        when: <% succeeded() %>
    input:
      log_level: DEBUG
      table: sec_vulnerability_assets
      connection: cloudmanagement
  # [1261, 999]
  get_cves_insert_db:
    action: sim_sec_alerts.get_cve_insert_db
    next:
      - do:
          - end_mail
        when: <% succeeded() %>
  # [1265, 1109]
  end_mail:
    action: core.sendmail
    input:
      from: SiM.Automation@ethan.com.au
      to: sahil.dutta@accelnomics.com,aman.mujawar@ethan.com.au
      subject: Successful execution of  "sec_vulnerability_assets" workflow
      body: The  "sec_vulnerability_assets"  workflow has successfully completed
  # [1358, 0]
  start_mail:
    action: core.sendmail
    input:
      from: SiM.Automation@ethan.com.au
      to: sahil.dutta@accelnomics.com,aman.mujawar@ethan.com.au
      subject: Started  execution for "sec_vulnerability_assets"  workflow
      body: The "sec_vulnerability_assets" workflow has successfully started.
    next:
      - do:
          - get_netdb_details_insert_db
        when: <% succeeded() %>
  # [1358, 104]
  get_netdb_details_insert_db:
    action: sim_sec_alerts.get_netdb_details_insert_db
    next:
      - do:
          - Start
        when: <% succeeded() %>
  # [1279, 577]
  call_NIST_2:
    action: sim_sec_alerts.collect_nist_asset_data_2.0
    next:
      - do:
          - Delete_current_data
        publish:
          - notification: <% result().result %>
          - cves: <% result().result %>
        when: <% succeeded() %>
    input:
      log_level: DEBUG
      asset: "{{ctx().records}}"
      apiKey: afce07e1-68c2-4c6d-9ed8-75b075d508e8
      timeout: 12000
