version: 1.0

input:
  - exclude_list

vars:
  - key_name: "BraasIgnoreStore"
  - rkey_name: "BraasRemediationStore"
  - ignore_list: []
  - response: {"remediation": [], "ignore": []}
  - ticker_payload: []

output:
  - data: <% ctx().response %>

tasks:
  # [192, 51]
  Start:
    action: core.noop
    next:
      - when: <% succeeded() %>
        publish:
          - rod_ignore_list_str: <% st2kv('system.' + ctx().key_name, default => null) %>
          - rod_remediation_list_str: <% st2kv('system.' + ctx().rkey_name, default => null) %>
          - rod_ignore_list: <% switch(isString(ctx().rod_ignore_list_str) => ctx().rod_ignore_list_str.split(","), true => []) %>
          - rod_remediation_list: <% switch(isString(ctx().rod_remediation_list_str) => ctx().rod_remediation_list_str.split(","), true => []) %>
          - ignore_list: <% ctx().rod_ignore_list.skipWhile(not $) + ctx().exclude_list %>
          - date_now: <% now(offset=>localtz()) %>
          - current_time: <% ctx().date_now.format("%H") %>
          - current_date: <% ctx().date_now.format("%Y-%m-%d") %>
          - prev_date: <% (ctx().date_now - timespan(days => 1)).format("%Y-%m-%d") %>
          - start_date: <% ctx().current_date %>
          - end_date: <% (ctx().date_now + timespan(days => 1)).format("%Y-%m-%d") %>
          - start_time: "19:00:00.000"
          - end_time: "07:00:00.000"
          - start_date: "{{ ctx().prev_date if ctx().current_time|int >= 0 and ctx().current_time|int <= 7 else ctx().start_date }}"
          - end_date: "{{ ctx().current_date if ctx().current_time|int >= 0 and ctx().current_time|int <= 7 else ctx().end_date }}"
        do:
          - Print_Ignore_Store
          - Print_Remediation_Store
          - Query_Net_Customers
      - when: <% failed() %>
        do:
          - fail
 
  # [42, 251]
  Print_Ignore_Store:
    action: core.echo
    input:
      message: "{{ ctx().ignore_list | join(',') if ctx().ignore_list|length > 0 else 'None' }}"

  # [492, 201]
  Print_Remediation_Store:
    action: core.echo
    input:
      message: "{{ ctx().rod_remediation_list_str if ctx().rod_remediation_list_str != None else 'None' }}"

  # [242, 601]
  Query_Net_Customers:
    action: sql.query
    input:
      log_level: DEBUG
      connection: cloudmanagement
      query: select Name, IaaSCode, ServiceNowAccountID, SelcommAccountNumber FROM NetworkCustomer WHERE IaaSCode != ''
    next:
      - when: <% succeeded() %>
        publish:
          - customers: <% switch(isList(result().result) => result().result, true => []) %>
        do:
          - GET_Backup_Report
      - when: <% failed() %>
        do: fail

  # [442, 751]
  GET_Backup_Report:
    action: sim_braas_action.remediate_report_v4
    input:
      start_date: <% ctx().start_date %>
      start_time: <% ctx().start_time %>
      end_date: <% ctx().end_date %>
      end_time: <% ctx().end_time %>
    next:
      - when: <% succeeded() %>
        publish:
          - backup_report: <% switch(isDict(result().output) => result().output, true => {}) %> 
          - success_report: <% switch(isList(result().output.debug_success) => result().output.debug_success, true => []) %>
          - failure_report: <% switch(isList(result().output.debug_failures) => result().output.debug_failures, true => []) %>
          - remediation: "{%- set resourceArr = [] -%}{%- for failure in ctx().failure_report if not failure['backupServer'] in ctx().ignore_list and failure['status'] == 'failed' and 'VMware Image' in failure['pluginName'] -%}{{ resourceArr.append(failure) or '' }}{%- endfor -%}{{ resourceArr | tojson }}"
          - remediation: "{{ ctx().remediation | from_json_string }}"
        do:
          - Check_For_Actions
      - when: <% failed() %>
        do: fail

  # [1342, 751]
  Check_For_Actions:
    action: core.noop
    next:
      - when: <% len(ctx().success_report) > 0 %>
        do:
          - Close_SuccessFul_Tickets
      - when: <% len(ctx().ignore_list.skipWhile(not $)) > 0 %>
        do:
          - Store_Ignore_List
      - when: <% len(ctx().remediation) > 0 %>
        publish:
          - failure_payload: <% ctx().remediation %>
          - failure_payload: <% ctx(failure_payload).where(not $.backupServer in ctx().ignore_list and not $.clientName.toUpper() in ctx().rod_remediation_list.select($.toUpper())).select($) %>
        do:
          - Validate_Failure_Payload_For_Rerun
      - when: <% len(ctx().ignore_list.skipWhile(not $)) = 0 and len(ctx().remediation) = 0 and len(ctx().success_report) = 0 %>
        do:
          - End

  Validate_Failure_Payload_For_Rerun:
    action: core.noop
    next:
      - when: <% len(ctx().failure_payload) > 0 %>
        do:
          - Rerun_Backup_Jobs
      - when: <% len(ctx().failure_payload) = 0 %>
        do:
          - End

  # [542, 1]
  Store_Ignore_List:
    action: sim_braas_action.data_store
    input:
      key: <% ctx().key_name %>
      value: <% ctx().ignore_list %>
    next:
      - when: <% failed() %>
        do: fail

  # [892, 101]
  Rerun_Backup_Jobs:
    action: sim_braas_action.rerun_backup_process_wrapper
    input:
      failure_payload: <% ctx().failure_payload %>
      remediation_list: <% ctx().rod_remediation_list %>
      ignore_list: <% ctx().ignore_list %>
    next:
      - when: <% len(result().output.remediation) > 0 %>
        publish:
          - failure_payload: "{%- set resourceArr = [] -%}{%- for obj in result().output.exec_result if obj|length > 0 -%}{{ resourceArr.append(obj) or '' }}{%- endfor -%}{{resourceArr | tojson}}"
          - ticker_payload: "{{ ctx().failure_payload | from_json_string  }}"
          - response: <% ctx(response).set("remediation"=>result().output.remediation,"ignore"=>ctx().ignore_list.flatten()) %>
        do:
          - Payload_Data_Validation
      - when: <% len(result().output.remediation) = 0 %>
        do:
          - OnDemand_End
      - when: <% failed() %>
        do: fail

  Payload_Data_Validation:
    action: core.noop
    next:
      - when: <% len(ctx().ticker_payload) > 0 %>
        do:
          - Create_Ticket_Remediation
      - when: <% len(ctx().ticker_payload) = 0 %>
        do:
          - End

  # [842, 751]
  Close_SuccessFul_Tickets:
    action: sim_braas.backup_ticket_closure
    input:
      dpa_report: <% ctx().success_report %>

  # [1292, 251]
  Create_Ticket_Remediation:
    action: sim_braas.create_incident_for_backup_failure_2
    input:
      input_backup_failure_object: <% ctx().ticker_payload %>
      input_snow_customer_object: <% ctx().customers %>
    next:
      - when: <% succeeded() %>
        do:
          - OnDemand_End
      - when: <% failed() %>
        do: fail

  # [0, 0]
  OnDemand_End:
    action: core.noop

  # [892, 551]
  End:
    action: core.noop
