---
version: 1.0

description: Cisco IOS Benchmark - Device Compliant

vars:
  - Devices: []
  - process_name: "Cisco device compliant check"
  - deviceIndex: 0
  - response: {}
  - target_automation: sim_cisco_compliance.config_compliance

input:
  - customer_id
  - exclude_device_types
  - limit

tasks:
  # [192, 51]
  Start:
    action: core.noop
    next:
      - when: <% succeeded() %>
        publish:
          - notification: (<% ctx().process_name%>) process started
          - start_time: <% (now(offset=>localtz())).format("%Y-%m-%d %H:%M:%S") %>
        do:
          - notify
          - get_device_list


  # [464, 217]
  get_device_list:
    action: sim_cisco_compliance.get_device_list
    input:
      customer_id: <% ctx().customer_id %>
    next:
      - when: <% succeeded() and len(result().result)>0 %>
        publish:
          - device_list: <% result().result %>
          - device_count: "{{ ctx().limit if ctx().limit else ctx().device_list|length }}"
        do:
          - do_compliance_check
      - when: <% succeeded() and len(result().result)<=0 %>
        publish:
          - notification: No devices found for customer [<% ctx().customer_id %>]
        do:
          - notify
      - when: <% failed() %>
        do:
          - fail

  # [142, 351]
  do_compliance_check:
    action: sim_cisco_compliance.perform_compliance_check
    input:
      device_id: <% str(ctx().device_list[ctx().deviceIndex].NetDBDeviceId) %>
      device_type: <% ctx().device_list[ctx().deviceIndex].NetDBDeviceType %>
      exclude_list: <% ctx().exclude_device_types %>
      time_stamp: <% (now(offset=>localtz())).format("%Y-%m-%d %H:%M:%S") %>
      customer_id: <% ctx().customer_id %>
      count: <% ctx().deviceIndex + 1 %>
    next:
      - when: <% (succeeded() or failed()) and (ctx().deviceIndex) < (ctx().device_count-1) %>
        publish:
          - output: <% switch(isDict(result().result) => result().result, true => {}) %>
          - Devices: <% ctx().Devices.append(ctx().output) %>
          - deviceIndex: <% ctx().deviceIndex + 1 %>
        do:
          - do_compliance_check
      - when: <% (succeeded() or failed()) and ctx().deviceIndex >= (ctx().device_count-1) %>
        publish:
          - notification: Processed <% str(ctx().deviceIndex+1) %> device(s) for customer (<% ctx().customer_id %>)
          - output: <% switch(isDict(result().result) => result().result, true => {}) %>
          - Devices: <% ctx().Devices.append(ctx().output) %>
          - response: <% dict(NetDBCompanyID=>ctx().customer_id, compliancecheckTimestamp=>ctx().start_time, Devices=>ctx().Devices) %>
        do:
          - notify
          - trigger_new_workflow

  # [359, 605]
  get_output:
    action: core.local
    input:
      cmd: sleep 60
      timeout: 120

  # [667, 354]
  notify:
    action: core.echo
    input:
      message: <% ctx().notification %>
  # [363, 496]
  trigger_new_workflow:
    action: sim_cisco_compliance.trigger_config_compliance 
    input:
      automation_name: <% ctx().target_automation %>
      input_json: <% ctx().response %>
    next:
      - do:
          - get_output

output:
  - result: <% task("trigger_new_workflow").result %>
  - notifications: <% ctx().notification %>
