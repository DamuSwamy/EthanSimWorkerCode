version: 1.0

input:
  - tenant_id
  - password_id
  - db_connection
  - batch_size

vars:
  - startIndex: 0
  - counter: 1
  - failures: []
  - auth_counter: 1
 
output:
  - status: <% ctx().failures %>

tasks:
  # [329, 104]

  Get_AuthToken:
    action: sim_msol_billing.get_auth_token_v2
    input:
      password_id: <% ctx().password_id %>
      tenant_id: <% ctx().tenant_id %>
    next:
      - when: <% succeeded() %>
        publish:
          - auth_token: <% result().output.token %>
        do:
          - Get_PartnerCustomer_Users
      - when: <% failed() %>
        do: fail

  Get_PartnerCustomer_Users:
    action: sql.query
    input:
      connection: <% ctx().db_connection %>
      query: "WITH CustomerUsers AS (Select CustomerID,UserId,ROW_NUMBER() OVER (ORDER BY CustomerID) AS 'RowNumber' from PartnerCustomerUser_Temp) SELECT * FROM CustomerUsers WHERE RowNumber BETWEEN <% str(ctx().startIndex + 1) %> AND <% ctx().batch_size %>" 
    next:
      - when: <% succeeded() and len(result().result) > 0 %>
        publish:
          - customer_users: <% switch(isList(result().result) => result().result, true => []) %>
        do:
          - Get_PartnerCustomer_User_Licenses
      - when: <% succeeded() and len(result().result) <= 0 %>
        do:
          - Update_PartnerCustomer_License
          - Purge_Executions_Core_Local
          - Purge_Executions_SQL 
      - when: <% failed() %>
        do: fail

  # [914, 217]
  Delete_From_PartnerCustomerUserLicense_Temp:
    action: sql.delete
    input:
      table: PartnerCustomerUserLicense_Temp
      connection: <% ctx().db_connection %>
    next:
      - when: <% succeeded() and now(offset=>localtz()).format("%d") = "01" %>
        do:
          - Archive
          - Get_AuthToken
      - when: <% succeeded() and now(offset=>localtz()).format("%d") != "01" %>
        do: 
          - Get_AuthToken
      - when: <% failed() %>
        do: fail

  Archive:
    action: sql.query
    input:
      connection: <% ctx().db_connection %>
      query: "INSERT INTO PartnerCustomerUserLicense_Archived SELECT [CustomerID],[UserId],[ServicePlans],[skuPartNumber],[LicensedProductSku],[Name],[LicenseGroupId],[LogDate],(SELECT Billing_Period FROM Bill_Cycle_Status WHERE Cycle_State='In Progress') FROM PartnerCustomerUserLicense"

  Get_PartnerCustomer_User_Licenses:
    delay: 30
    action: sim_msol_billing.return_customer_user_licenses
    input:
      users: <% ctx().customer_users %>
      auth_token: <% ctx().auth_token %>
      db_connection: <% ctx().db_connection %>
      timeout: 3600
    next:
      - when: <% (succeeded() or failed()) and (ctx().startIndex/ctx().auth_counter) < 3000 %>
        publish:
          - output: <% switch(isList(result().result) => result().result, true => []) %>
          - users: <% ctx().output %>
          - failures: <% ctx().output.failures + ctx().failures %>
          - startIndex: <% ctx().batch_size %>
          - batch_size: <% ctx().batch_size + (ctx().startIndex / ctx().counter) %>
          - counter: <% ctx().counter + 1 %>
        do:
          - Get_PartnerCustomer_Users
      - when: <% (succeeded() or failed()) and (ctx().startIndex/ctx().auth_counter) >= 3000 %>
        publish:
          - auth_counter: <% ctx().auth_counter + 1 %>
          - output: <% switch(isList(result().result) => result().result, true => []) %>
          - users: <% ctx().output %>
          - failures: <% ctx().output.failures + ctx().failures %>
          - startIndex: <% ctx().batch_size %>
          - batch_size: <% ctx().batch_size + (ctx().startIndex / ctx().counter) %>
          - counter: <% ctx().counter + 1 %>
        do:
          - Get_AuthToken

  Purge_Executions_Core_Local:
    delay: 10
    action: core.local
    input:
      cmd: /opt/stackstorm/st2/bin/st2-purge-executions --config-file /etc/st2/st2.conf --timestamp="<% (now(offset=>localtz())).format("%Y-%m-%dT%H:%M:%S.%fZ") %>" --action-ref="core.local"

  Purge_Executions_SQL:
    delay: 30
    action: core.local
    input:
      cmd: /opt/stackstorm/st2/bin/st2-purge-executions --config-file /etc/st2/st2.conf --timestamp="<% (now(offset=>localtz())).format("%Y-%m-%dT%H:%M:%S.%fZ") %>" --action-ref="sql.insert_bulk"

  Update_PartnerCustomer_License:
    action: sql.query
    input:
      connection: <% ctx().db_connection %>
      query: "UPDATE PartnerCustomerUserLicense set LogDate=GETDATE() FROM PartnerCustomerUserLicense_Temp a INNER JOIN PartnerCustomerUserLicense b ON a.CustomerID = b.CustomerID AND a.UserId = b.UserId AND a.LicensedProductSku = b.LicensedProductSku"
    next:
      - when: <% succeeded() %>
        do:
          - Insert_PartnerCustomers_Users
      - when: <% failed() %>
        do: fail

  Insert_PartnerCustomers_Users:
    action: sql.query
    input:
      connection: <% ctx().db_connection %>
      query: "INSERT INTO PartnerCustomerUserLicense ([CustomerID],[UserId],[ServicePlans],[skuPartNumber],[LicensedProductSku],[Name],[LicenseGroupId],[LogDate]) SELECT Distinct a.[CustomerID],a.[UserId],a.[ServicePlans],a.[skuPartNumber],a.[LicensedProductSku],a.[Name],a.[LicenseGroupId],GETDATE() FROM PartnerCustomerUserLicense_Temp a LEFT JOIN PartnerCustomerUserLicense b ON a.CustomerID = b.CustomerID AND a.UserId = b.UserId AND a.LicensedProductSku = b.LicensedProductSku WHERE b.CustomerID is null"
    next:
      - when: <% succeeded() %>
        do:
          - End
      - when: <% failed() %>
        do: fail

  End:
    action: core.noop
